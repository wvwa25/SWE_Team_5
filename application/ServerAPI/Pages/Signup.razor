<h3>Register</h3>
@page "/register"
@using MudBlazor
@using ServerAPI.Data;
@using System.Text.Json.Serialization
@using System.Net.Http;
@using System.Text;
@using System.Text.Json;
@inject NavigationManager NavManager
@inject HttpClient HttpClient
@inject IHttpClientFactory ClientFactory
<body>

<h4>@Status</h4>
@if (isRegistered)
	{
		<h4>Username is @registerUser.name</h4>
		<NavLink class="btn btn-primary" href="/login">Login</NavLink>
		<br />
		<br />
	}

<EditForm Model=@registerUser OnSubmit=@FormSubmitted>
	<MudTextField @bind-Value="userName" Label="Username" Variant="Variant.Text"></MudTextField>
	<MudTextField @bind-Value="email" Label="Email" Variant="Variant.Text"></MudTextField>
	<MudTextField @bind-Value="password" Label="Password" Variant="Variant.Text"></MudTextField>
	<MudTextField @bind-Value="passwordCheck" Label="Re-enter Password" Variant="Variant.Text"></MudTextField>

	<input type="submit" value="Submit" class="btn btn-primary" />
</EditForm>

</body>

@code
{
	private static readonly HttpClient client = new HttpClient();
	string userName;
	string password;
	string email;
	string passwordCheck;
	string Status = "Not submitted";
	Boolean isRegistered = false;
	NewUser registerUser = new NewUser();
	List<string> currentNames = new List<string>();


	private IEnumerable<ItemShop>? items = Array.Empty<ItemShop>();
	private bool getBranchesError;
	private bool shouldRender;
	private bool canDownload = false;
	protected override bool ShouldRender() => shouldRender;

	//GET Method Call, this is to get the current users in the database.
	protected override async Task OnInitializedAsync()
	{
		var request = new HttpRequestMessage(HttpMethod.Get,"https://my-api-test.azurewebsites.net/api/get-list?code=_LjDB4O81c3uwiPBV04TpFBvr3EZt0PPUJn-cawlDjxEAzFulyXHwg==");

		var client = ClientFactory.CreateClient();

		var response = await client.SendAsync(request);

		if (response.IsSuccessStatusCode)
		{
			using var responseStream = await response.Content.ReadAsStreamAsync();
			items = await JsonSerializer.DeserializeAsync
				<IEnumerable<ItemShop>>(responseStream);
		}
		else
		{
			getBranchesError = true;
		}
		shouldRender = true;

	}
	void FormSubmitted()
	{
		if (String.IsNullOrEmpty(userName) || String.IsNullOrEmpty(password) || String.IsNullOrEmpty(email) || String.IsNullOrEmpty(passwordCheck))
		{
			Status = "Try again!";
		}
		else if (password.Equals(passwordCheck))
		{
			if(checkName(userName))
			{
				Status = "Error: That username already exists";
			}
			else
			{
				isRegistered = true;
				registerUser.name = userName;
				registerUser.password = password;
				registerUser.email = email;
				registerUser.role = "user";
				PostToDatbase();
				Status = "Registration is successful";
			}
		}
		else
		{
			Status = "Error: Passwords do not match";
		}
	}
	//POST method to post the user information to the database
	public async Task PostToDatbase()
	{
		var request = new HttpRequestMessage(HttpMethod.Post,"https://my-api-test.azurewebsites.net/api/createnewitem?code=Ndv8ZTDuwxUTPBWlDlHuiSSyhxJ9RyxrdwZGCSwbhuCEAzFu1nbrZA==");
		var client = ClientFactory.CreateClient();

		var json = JsonSerializer.Serialize(registerUser);
		var content = new StringContent(json, Encoding.UTF8, "application/json");
		request.Content = content;

		var response = await client.SendAsync(request);
	}
	//Loops through the current usernames in the database and then checks if the username is already in use. this kinda sucks but it works.
	private bool checkName(string userName)
	{
		Console.WriteLine("Passed Username" + userName);
		foreach(var item in items)
		{
			if(item.Name.Equals(userName))
			{
				return true;
			}
		}
		return false;
	}
}